package com.bw.movie.ui.movie.fragment;


import android.annotation.TargetApi;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.drawable.BitmapDrawable;
import android.os.Build;
import android.renderscript.Allocation;
import android.renderscript.Element;
import android.renderscript.RenderScript;
import android.renderscript.ScriptIntrinsicBlur;
import android.support.annotation.RequiresApi;
import android.support.v4.app.Fragment;
import android.support.v4.view.ViewPager;
import android.util.Log;
import android.view.View;
import android.view.ViewTreeObserver;
import android.widget.ImageSwitcher;
import android.widget.ImageView;
import android.widget.RelativeLayout;

import com.bw.movie.R;
import com.bw.movie.base.BaseFragment;
import com.bw.movie.bean.MovieListBean;
import com.bw.movie.ui.movie.adapter.MyPagerAdapter;
import com.bw.movie.ui.movie.presenter.MovieListPresenter;
import com.bw.movie.ui.movie.view.MovieDetailsActivity;
import com.bw.movie.ui.movie.view.MovieListView;
import com.bw.movie.ui.movie.view.RotationPageTransformer;
import com.bw.movie.utils.FastBlur;

import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * A simple {@link Fragment} subclass.
 */
public class Movie_Hot extends BaseFragment<MovieListPresenter> implements MovieListView{


    private ViewPager mViewPager;
    private RelativeLayout mRelativeLayout;
    private MyPagerAdapter mPagerAdapter;
    private int page = 1;
    private int count = 10;
    private RelativeLayout frg_movie_activity_main;
    private ImageSwitcher frg_movie_imgView;
    private Bitmap bitmap;
    private ImageView frg_movie_bg;

    public Movie_Hot() {
    }
    @Override
    protected MovieListPresenter getPresenter() {
        return new MovieListPresenter(this);
    }

    @Override
    protected void initView(View view) {
        mViewPager = (ViewPager) view.findViewById(R.id.frg_movie_viewpager);
        frg_movie_activity_main = view.findViewById(R.id.frg_movie_activity_main);
        frg_movie_bg = view.findViewById(R.id.frg_movie_bg);
    }

    @Override
    protected int provideLayoutId() {
        return R.layout.fragment_movie__hot;
    }

    @Override
    protected void initListener() {

    }

    @Override
    protected void initData() {
        mPresenter.getMovieList(page,count);


    }

    @Override
    public void getOnSuccess(Object bean) {
        final MovieListBean listBean = (MovieListBean) bean;

        mPagerAdapter = new MyPagerAdapter(listBean,getActivity());
        mViewPager.setAdapter(mPagerAdapter);
        mViewPager.setPageTransformer(true,new RotationPageTransformer());
        mViewPager.setOffscreenPageLimit(2);
        mViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {
            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {

            }

            @Override
            public void onPageSelected(int position) {
                //frg_movie_activity_main.setBackgroundColor(Color.BLACK);
                try {
                    Bitmap imageURI = getImageURI(listBean.getResult().get(position).getImageUrl());
                    Log.i("Aaaaaaaaaaaaa",imageURI.toString());
                    Bitmap bitmap = blurBitmap(getActivity(), imageURI, 5f);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                //Log.i("Aaaaaaaaaaaaa",bitmap.toString());
                frg_movie_bg.setImageBitmap(bitmap);

            }

            @Override
            public void onPageScrollStateChanged(int state) {

            }
        });
        mPagerAdapter.setCallBack(new MyPagerAdapter.CallBack() {
            @Override
            public void onClick(Integer id) {
                Intent intent = new Intent(getActivity(),MovieDetailsActivity.class);
                intent.putExtra("movieId",id);
                getActivity().startActivity(intent);
            }
        });
    }

    @Override
    public void getOnError(String errMsg) {
        Log.i("aaaaaaaaaa",errMsg);
    }
    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
    public Bitmap blurBitmap(Context context, Bitmap image, float blurRadius) {
        final float BITMAP_SCALE = 0.4f;
        // 计算图片缩小后的长宽
        int width = Math.round(image.getWidth() * BITMAP_SCALE);
        int height = Math.round(image.getHeight() * BITMAP_SCALE);

        // 将缩小后的图片做为预渲染的图片
        Bitmap inputBitmap = Bitmap.createScaledBitmap(image, width, height, false);
        // 创建一张渲染后的输出图片
        Bitmap outputBitmap = Bitmap.createBitmap(inputBitmap);

        // 创建RenderScript内核对象
        RenderScript rs = RenderScript.create(context);
        // 创建一个模糊效果的RenderScript的工具对象
        ScriptIntrinsicBlur blurScript = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));

        // 由于RenderScript并没有使用VM来分配内存,所以需要使用Allocation类来创建和分配内存空间
        // 创建Allocation对象的时候其实内存是空的,需要使用copyTo()将数据填充进去
        Allocation tmpIn = Allocation.createFromBitmap(rs, inputBitmap);
        Allocation tmpOut = Allocation.createFromBitmap(rs, outputBitmap);

        // 设置渲染的模糊程度, 25f是最大模糊度
        blurScript.setRadius(blurRadius);
        // 设置blurScript对象的输入内存
        blurScript.setInput(tmpIn);
        // 将输出数据保存到输出内存中
        blurScript.forEach(tmpOut);

        // 将数据填充到Allocation中
        tmpOut.copyTo(outputBitmap);

        return outputBitmap;
    }

    public Bitmap getImageURI(String path) throws Exception {

        // 从网络上获取图片
        URL url = new URL(path);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setConnectTimeout(5000);
        conn.setRequestMethod("GET");
        conn.setDoInput(true);
        if (conn.getResponseCode() == 200) {

            InputStream is = conn.getInputStream();
            Bitmap bitmap = BitmapFactory.decodeStream(is);
            return bitmap;
        }
        return null;
    }
}
